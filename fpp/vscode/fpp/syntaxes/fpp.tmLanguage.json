{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "FPP Description Language",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#types"
		},
		{
			"include": "annotations"
		},
		{
			"include": "todo"
		},
		{
			"include": "identifier"
		},
		{
			"include": "numbers"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [{
				"name": "keyword.other.fpp",
				"match": "\\b(active|activity|always|array|assert|async|at|base|block|change|command|component|connections|constant|cpu|default|diagnostic|drop|enum|event|false|fatal|format|get|guarded|health|high|id|import|include|input|instance|internal|locate|low|match|module|on|opcode|orange|output|param|passive|phase|port|priority|private|queue|queued|recv|red|ref|reg|resp|save|serial|set|severity|size|stack|struct|sync|telemetry|text|throttle|time|topology|true|type|update|warning|with|yellow)\\b"
			}]
		},
		"strings": {
			"name": "string.quoted.double.fpp",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.fpp",
					"match": "\\\\."
				},
				{
					"name": "constant.character.escape.fpp",
					"match": "\\(\\\\.\\|\"[^\"]\\|\"\"[^\"]\\)"
				}
			]
		},
		"operators": {
			"patterns": [{
				"name": "keyword.operator.fpp",
				"match": "\\\\"
			}]
		},
		"types": {
			"patterns": [{
				"name": "support.type.fpp",
				"match": "\\b(F32|F64|I16|I32|I64|I8|U16|U32|U64|U8|bool|string)\\b"
			}]
		},
		"annotations": {
			"patterns": [{
				"name": "markup.bold.fpp",
				"match": "@.*$"
			}]
		},
		"todo": {
			"patterns": [{
				"name": "markup.italic.fpp",
				"match": "\\v<TODO"
			}]
		},
		"identifier": {
			"patterns": [{
				"name": "entity.name.function.member.fpp",
				"match": "\\v\\$?[_A-Za-z][_A-Za-z0-9]*"
			}]
		},
		"numbers": {
			"patterns": [{
				"name": "constant.numeric.fpp",
				"match": "\\v<\\d+(\\.\\d*)?([Ee]-?\\d+)?"
			},{
				"name": "constant.numeric.fpp",
				"match": "\\.\\d+([Ee]-?\\d+)?"
			},{
				"name": "constant.numeric.fpp",
				"match": "\\v<0[xX]\\x+*"
			}]
		}
	},
	"scopeName": "source.fpp"
}